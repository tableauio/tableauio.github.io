var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/design/overview/",title:"Overview",description:"Tableau is a powerful configuration converter based on Protobuf(proto3).",content:"Features #  Convert Excel to JSON, JSON is the first-class citizen of exporting targets. Use Protoconf as the IDL(Interface Description Language) to define the structure of Excel/XML. Use Golang to develop the conversion engine. Support multiple programming languages, thanks to Protobuf(proto3).  Concepts #  Importer: Excel/XML importer. IR: Intermediate Representation. Filter: filter the IR. Exporter: JSON(protojson), TEXT(prototext), and BIN(protowire). Protoconf: a configuration metadata format based on protobuf.  Workflow # graph TD A1(XML) --\u0026gt;|xlsxgen| A A(Excel) --\u0026gt;|protogen| B[Protoconf] A --\u0026gt; |excelize loader|C[confgen.Parser] subgraph Core B --\u0026gt; |protoc-gen-go| D[Protobuf Go] D --\u0026gt; |protoreflect| C C --\u0026gt; E[confgen.Exporter] end E --\u0026gt; O1(\u0026quot;JSON(protojson)\u0026quot;) E --\u0026gt; O2(\u0026quot;TEXT(prototext)\u0026quot;) E --\u0026gt; O3(\u0026quot;BIN(protobin)\u0026quot;)  Types #  Scalar Message(struct) List Map(unordered) Timestamp Duration  TODO # protoc plugins #  Golang C++ C#/.NET Python Lua Javascript/Typescript/Node Java  Metadata #  metatable: a message to describe the worksheet\u0026rsquo;s metadata. metafield: a message to describe the caption\u0026rsquo;s metadata. captrow: caption row, the exact row number of captions at worksheet. Newline in caption is allowed for more readability, and will be trimmed in conversion. descrow: description row, the exact row number of descriptions at worksheet. datarow: data row, the start row number of data.  Newline(line break) in major operating systems:\n   OS Abbreviation Escape sequence     Unix (linux, OS X) LF \\n   Microsoft Windows CRLF \\r\\n   classic Mac OS/OS X CR \\r     LF: Line Feed, CR: Carriage Return.\nMac OS X\n Generator #  generate protoconf by Excel(header): Excel -\u0026gt; protoconf generate Excel(header) by protoconf: protoconf -\u0026gt; Excel  Conversion #  Excel -\u0026gt; JSON(default format and human readable) Excel -\u0026gt; protowire(small size) Excel -\u0026gt; prototext(human debugging) JSON -\u0026gt; Excel protowire -\u0026gt; Excel prototext -\u0026gt; Excel  Pretty Print #  Multiline: every textual element on a new line Indent: 4 space characters JSON support prototext support  EmitUnpopulated #  JSON: EmitUnpopulated specifies whether to emit unpopulated fields.  Scalar Types #  interger: int32, uint32, int64 and uint64 float: float and double bool string bytes datetime, date, time, duration  Enumerations #  enum: The Parser accepts three enum value forms:  enum value number enum value name enum value alias name (with EnumValueOptions specified)   enum: validate the enum value.  Composite Types #  message: horizontal(row direction) layout, fields located in cells. message: simple in-cell message, each field must be scalar type. It is a comma-separated list of fields. E.g.: 1,test,3.0. List\u0026rsquo;s size need not to be equal to fields' size, as fields will be filled in order. Fields not configured will be filled default values due to its scalar type. list: horizontal(row direction) layout, which is list\u0026rsquo;s default layout, and each item can be message or scalar. list: vertical(column direction) layout. and each item should be message. list: simple in-cell list, element must be scalar type. It is a comma-separated list of elements. E.g.: 1,2,3. list: scalable or dynamic list size. list: smart recognition of empty element at any position. map: horizontal(row direction) layout. map: vertical(column direction) layout, and is map\u0026rsquo;s default layout. map: unordered map or hash map. map: ordered map. map: simple in-cell map, both key and value must be scalar type. It is a comma-separated list of key:value pairs. E.g.: 1:10,2:20,3:30. map: scalable or dynamic map size. map: smart recognition of empty value at any position. nesting: unlimited nesting of message, list, and map. nesting: the composite type\u0026rsquo;s first element can be composite type.  Default Values # Each scalar type\u0026rsquo;s default value is same as protobuf.\n interger: 0 float: 0.0 bool: false string: \u0026quot;\u0026quot; bytes: \u0026quot;\u0026quot; in-cell message: each field\u0026rsquo;s default value is same as protobuf in-cell list: element\u0026rsquo;s default value is same as protobuf in-cell map: both key and value\u0026rsquo;s default value are same as protobuf message: all fields have default values  Empty #  scalar: default value same as protobuf. message: empty message will not be spawned if all fields are empty. list: empty list will not be spawned if list\u0026rsquo;s size is 0. list: empty message will not be appended if list\u0026rsquo;s element(message type) is empty. map: empty map will not be spawned if map\u0026rsquo;s size is 0. map: empty message will not be inserted if map\u0026rsquo;s value(message type) is empty. nesting: recursively empty.  Merge #  merge multiple workbooks merge multiple worksheets  Workbook meta # workbook meta sheet @TABLEAU:\n specify which sheets to be parsed specify parser options for each sheet     Sheet Alias Nameline Typeline     Sheet1 ExchangeInfo 2 2    Datetime #  Understanding about RFC 3339 for Datetime and Timezone Formatting in Software Engineering\n2019-10-12T07:20:50.52Z # This is acceptable in ISO 8601 and RFC 3339 (with T) 2019-10-12 07:20:50.52Z # This is only accepted in RFC 3339 (without T)\n \u0026ldquo;Z\u0026rdquo; stands for Zero timezone or Zulu timezone UTC+0, and equal to +00:00 in the RFC 3339. RFC 3339 follows the ISO 8601 DateTime format. The only difference is RFC allows us to replace \u0026ldquo;T\u0026rdquo; with \u0026ldquo;space\u0026rdquo;.   Use RFC 3339 , which is following ISO 8601.\n Timestamp: based on google.protobuf.Timestamp, see JSON mapping Timezone: see ParseInLocation DST: Daylight Savings Time. There is no plan to handle this boring stuff. Datetime: excel format: yyyy-MM-dd HH:mm:ss, e.g.: 2020-01-01 05:10:00 Date: excel format: yyyy-MM-dd or yyMMdd, e.g.: 2020-01-01 or 20200101 Time: excel format: HH:mm:ss or HHmmss, e.g.: 05:10:00 or 051000 Duration: based ongoogle.protobuf.Duration , see JSON mapping Duration: excel format: form \u0026quot;72h3m0.5s\u0026quot;, see golang duration string form  Transpose #  Interchange the rows and columns of a worksheet.  Validation #  Min Max Range Options: e.g.: enum type Foreign key  Error Message #  Report clear and precise error messages when converter failed, please refer to the programming language compiler Use golang template to define error message template Multiple languages support, focused on English and Simplified Chinese  Performace #  Stress test Each goroutine process one worksheet Mutiple process model  Optimization #  Error: https://github.com/pkg/errors Log: https://github.com/uber-go/zap  "}).add({id:1,href:"/docs/guide/type/",title:"Type",description:"Type system of Tableau.",content:"Scalar Types #  interger: int32, uint32, int64 and uint64 float: float and double bool string bytes datetime, date, time, duration  Composite Types #  message: horizontal(row direction) layout, fields located in cells. message: simple in-cell message, each field must be scalar type. It is a comma-separated list of fields. E.g.: 1,test,3.0. List\u0026rsquo;s size need not to be equal to fields' size, as fields will be filled in order. Fields not configured will be filled default values due to its scalar type. list: horizontal(row direction) layout, which is list\u0026rsquo;s default layout, and each item can be message or scalar. list: vertical(column direction) layout. and each item should be message. list: simple in-cell list, element must be scalar type. It is a comma-separated list of elements. E.g.: 1,2,3. list: scalable or dynamic list size. list: smart recognition of empty element at any position. map: horizontal(row direction) layout. map: vertical(column direction) layout, and is map\u0026rsquo;s default layout. map: unordered map or hash map. map: ordered map. map: simple in-cell map, both key and value must be scalar type. It is a comma-separated list of key:value pairs. E.g.: 1:10,2:20,3:30. map: scalable or dynamic map size. map: smart recognition of empty value at any position. nesting: unlimited nesting of message, list, and map. nesting: the composite type\u0026rsquo;s first element can be composite type.  Enumerations #  enum: The Parser accepts three enum value forms:  enum value number enum value name enum value alias name (with EnumValueOptions specified)   enum: validate the enum value.  Default Values # Each scalar type\u0026rsquo;s default value is same as protobuf.\n interger: 0 float: 0.0 bool: false string: \u0026quot;\u0026quot; bytes: \u0026quot;\u0026quot; in-cell message: each field\u0026rsquo;s default value is same as protobuf in-cell list: element\u0026rsquo;s default value is same as protobuf in-cell map: both key and value\u0026rsquo;s default value are same as protobuf message: all fields have default values  Empty #  scalar: default value same as protobuf. message: empty message will not be spawned if all fields are empty. list: empty list will not be spawned if list\u0026rsquo;s size is 0. list: empty message will not be appended if list\u0026rsquo;s element(message type) is empty. map: empty map will not be spawned if map\u0026rsquo;s size is 0. map: empty message will not be inserted if map\u0026rsquo;s value(message type) is empty. nesting: recursively empty.  "}).add({id:2,href:"/docs/design/metadata/",title:"Metadata",description:"We create an IDL called Protoconf to describe Excel's structure(metadata), based on Protobuf(proto3).",content:"Notation # The syntax is specified using Extended Backus-Naur Form (EBNF).\nWorkbook -\u0026gt; Protoconf # Basic # workbook: (AliasTest)DemoTest, worksheet: (AliasActivity)DemoActivity\n protoconf file name is alias_test.proto. If with no (), name will be demo_test.proto configuration message name is AliasActivity. If with no (), name will be DemoActivity list: [ELEM-TYPE]COLUMN-TYPE, COLUMN-TYPE is column type, ELEM-TYPE is message name and list prefix (must not conflict with the protobuf keyword). map: map\u0026lt;KEY-TYPE,VALUE-TYPE\u0026gt;, KEY-TYPE must be scalar types, and VALUE-TYPE is message name and map prefix (must not conflict with build-in scalar type). import message types: .TYPE, e.g.: .Item represents the message Item already defined in the same protobuf package, and should not redefine it. well-known types  Timestamp: google.protobuf.Timestamp Duration: google.protobuf.Duration       ActivityID ActivityName ActivityBeginTime ActivityDuration ChapterID ChapterName SectionID SectionName SectionItem1Id SectionItem1Num SectionItem2Id SectionItem2Num     map\u0026lt;uint32,Activity\u0026gt; string timestamp duration map\u0026lt;uint32,Chapter\u0026gt; string [Section]uint32 int32 [.Item]int32 int32 int32 int32   1 activity1 2020-01-01 05:00:00 72h 1 chapter1 1 section1 1001 1 1002 2   1 activity1 2020-01-01 05:00:00 72h 1 chapter1 2 section2 1001 1 1002 2   1 activity1 2020-01-01 05:00:00 72h 2 chapter2 1 section1 1001 1 1002 2   2 activity2 2020-01-01 05:00:00 72h3m0.5s 1 chapter1 1 section1 1001 1 1002 2    // common.proto message Item { int32 id = 1 [(tableau.field).name = \u0026quot;Id\u0026quot;]; int32 num= 2 [(tableau.field).name = \u0026quot;Num\u0026quot;]; }  Output without prefix # // demo_test.proto import \u0026quot;common.proto\u0026quot; message DemoActivity{ map\u0026lt;uint32, Activity\u0026gt; activity_map = 1 [(key) = \u0026quot;ActivityID\u0026quot;]; message Activity { uint32 id= 1 [(tableau.field).name = \u0026quot;ActivityID\u0026quot;]; string name = 2 [(tableau.field).name = \u0026quot;ActivityName\u0026quot;]; map\u0026lt;uint32, Chapter\u0026gt; chapter_map = 3 [(tableau.field).key = \u0026quot;ChapterID\u0026quot;]; } message Chapter { uint32 id= 1 [(tableau.field).name = \u0026quot;ChapterID\u0026quot;]; string name = 2 [(tableau.field).name = \u0026quot;ChapterName\u0026quot;]; repeated Section section_list = 3 [(tableau.field).layout = LAYOUT_VERTICAL]; } message Section { uint32 id= 1 [(tableau.field).name = \u0026quot;SectionID\u0026quot;]; string name = 2 [(tableau.field).name = \u0026quot;SectionName\u0026quot;]; repeated Item item_list = 3 [(tableau.field).name = \u0026quot;SectionItem\u0026quot;]; } }  Output with prefix # // demo_test.proto message DemoActivity{ map\u0026lt;uint32, Activity\u0026gt; activity_map = 1 [(key) = \u0026quot;ActivityID\u0026quot;]; message Activity { uint32 activity_id= 1 [(tableau.field).name = \u0026quot;ActivityID\u0026quot;]; string activity_name = 2 [(tableau.field).name = \u0026quot;ActivityName\u0026quot;]; map\u0026lt;uint32, Chapter\u0026gt; chapter_map = 3 [(tableau.field).key = \u0026quot;ChapterID\u0026quot;]; } message Chapter { uint32 chapter_id= 1 [(tableau.field).name = \u0026quot;ChapterID\u0026quot;]; string chapter_name = 2 [(tableau.field).name = \u0026quot;ChapterName\u0026quot;]; repeated Section section_list = 3 [(tableau.field).layout = LAYOUT_VERTICAL]; } message Section { uint32 section_id= 1 [(tableau.field).name = \u0026quot;SectionID\u0026quot;]; string section_name = 2 [(tableau.field).name = \u0026quot;SectionName\u0026quot;]; repeated Item section_item_list = 3 [(tableau.field).name = \u0026quot;SectionItem\u0026quot;]; } }  Incell # workbook: (AliasTest)DemoTest, worksheet: (Env)Environment\n   ID Name IncellMessage IncellList IncellMap IncellMessageList IncellMessageMap     uint32 string {int32 id,string desc,int32 value}Msg []int32 map\u0026lt;int32,string\u0026gt; []{int32 id,string desc}Elem map\u0026lt;int32,Value{int32 id,string desc}\u0026gt;   1 Earth 1,desc,100 1,2,3 1:hello,2:world {1,hello},{2,world} 1:{1,hello},2:{2,world}    IncellMessage # Syntax: TODO: EBNF Type: message type Value: comma seperated field values, e.g.: 1,desc,100 Rules:\n   Default Type Value     int32 can be parsed as number   string cannot be parsed as number    IncellList # Syntax: []Type Type: any scalar type Value: comma seperated list items, e.g.: 1,2,3\nIncellMap # Syntax: map\u0026lt;Type,Type\u0026gt; Type: any scalar type Value: comma seperated key-value pairs, and key-value is seperated by colon. e.g.: 1:hello,2:world\nIncellMessageList # TODO\u0026hellip;\nIncellMessageMap # TODO\u0026hellip;\nOutput # // demo_test.proto message Env { uint32 ID = 1 [(tableau.field).name = \u0026quot;ID\u0026quot;]; string name = 2 [(tableau.field).name = \u0026quot;Name\u0026quot;]; Msg incell_message= 3 [(tableau.field).name = \u0026quot;IncellMessage\u0026quot;]; repeated int32 incell_list= 4 [(tableau.field).name = \u0026quot;IncellList\u0026quot;]; map\u0026lt;int32, string\u0026gt; incell_map = 5 [(tableau.field).name = \u0026quot;IncellMap\u0026quot;]; repeated Elem incell_message_list= 6 [(tableau.field).name = \u0026quot;IncellMessageList\u0026quot;]; map\u0026lt;int32, Value\u0026gt; incell_message_map = 7 [(tableau.field).name = \u0026quot;IncellMessageMap\u0026quot;]; // defaut name: field + \u0026lt;tagid\u0026gt; message Msg { int32 id = 1; string desc= 2; int32 value= 3; } message Elem { int32 id = 1; string desc= 2; } message Value { int32 id = 1; string desc= 2; } }   Incell message: comma seperated sequence: {TYPE [NAME],TYPE [NAME]}, NAME is optional, and will be auto generated as field + \u0026lt;tagid\u0026gt; if not specified. Incell list: []TYPE, TYPE must be scalar type. Incell map: map[KEY]VALUE, KEY and VALUE must be scalar types. Incell message list: []TYPE, TYPE must be message type. Incell message map: map[KEY]VALUE, KEY is scalar, and VALUE must be message type.  Protoconf -\u0026gt; Workbook # TODO\u0026hellip;\n"}).add({id:3,href:"/docs/prologue/introduction/",title:"Introduction",description:"Doks is a Hugo theme for building secure, fast, and SEO-ready documentation websites, which you can easily update and customize.",content:"Get started # There are two main ways to get started with Doks:\nTutorial # 👉  The Tutorial is intended for novice to intermediate users.   Step-by-step instructions on how to start a new Doks project. Tutorial →\nQuick Start # 👉  The Quick Start is intended for intermediate to advanced users.   One page summary of how to start a new Doks project. Quick Start →\nGo further # Recipes, Reference Guides, Extensions, and Showcase.\nRecipes # Get instructions on how to accomplish common tasks with Doks. Recipes →\nReference Guides # Learn how to customize Doks to fully make it your own. Reference Guides →\nExtensions # Get instructions on how to add even more to Doks. Extensions →\nShowcase # See what others have build with Doks. Showcase →\nContributing # Find out how to contribute to Doks. Contributing →\nHelp # Get help on Doks. Help →\n"}).add({id:4,href:"/docs/guide/nesting/",title:"Nesting",description:"Infinite nesting of composite types.",content:"TODO #  Struct List Map  "}).add({id:5,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:"Requirements # Doks uses npm to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts:\n Download and install Node.js (it includes npm) for your platform.  Start a new Doks project # Create a new site, change directories, install dependencies, and start development server.\nCreate a new site # Doks is available as a child theme, and a starter theme:\n Use the Doks child theme, if you do not plan to customize a lot, and/or need future Doks updates. Use the Doks starter theme, if you plan to customize a lot, and/or do not need future Doks updates.  Not quite sure? Use the Doks child theme.\nDoks child theme # git clone https://github.com/h-enk/doks-child-theme.git my-doks-site  Doks starter theme # git clone https://github.com/h-enk/doks.git my-doks-site  Change directories # cd my-doks-site  Install dependencies # npm install  Start development server # npm run start  Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.\nOther commands # Doks comes with commands for common tasks. Commands →\n"}).add({id:6,href:"/docs/guide/incell/",title:"Incell",description:"Composite types in cell.",content:"TODO #  Struct List Map  "}).add({id:7,href:"/docs/prologue/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:"💡  You can change the commands in the scripts section of `./package.json`.   create # Create new content for your site:\nnpm run create [path] [flags]  See also the Hugo docs: hugo new.\nlint # Check scripts, styles, and markdown for errors:\nnpm run lint  scripts # Check scripts for errors:\nnpm run lint:scripts [-- --fix]  styles # Check styles for errors:\nnpm run lint:styles [-- --fix]  markdown # Check markdown for errors:\nnpm run lint:markdown [-- --fix]  clean # Delete temporary directories:\nnpm run clean  start # Start local development server:\nnpm run start  build # Build production website:\nnpm run build  functions # Build Lambda functions:\nnpm run build:functions  preview # Build production website including draft and future content:\nnpm run build:preview  "}).add({id:8,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:"💡  Learn more about semantic versioning and advanced range syntax.   Check for outdated packages # The npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:\nnpm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]  Update packages # The npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:\nnpm update [\u0026lt;pkg\u0026gt;...]  "}).add({id:9,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:"Problems updating npm packages # Delete the ./node_modules folder, and run again:\nnpm install  Problems with cache # Delete the temporary directories:\nnpm run clean  "}).add({id:10,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"Hyas? # Doks is a Hyas theme build by the creator of Hyas.\nFooter notice? # Please keep it in place.\nKeyboard shortcuts for search? #  focus: Ctrl + / select: ↓ and ↑ open: Enter close: Esc  Other documentation? #  Netlify Hugo  Can I get support? # Create a topic:\n Netlify Community Hugo Forums Doks Discussions  Contact the creator? # Send h-enk a message:\n Netlify Community Hugo Forums Doks Discussions  "}).add({id:11,href:"/docs/guide/concept/",title:"Concept",description:"Core concepts of Tableau.",content:"TODO #  workbook worksheet row and column cell, in-cell, and cross-cell layout: vertical, horizontal transpose  "}).add({id:12,href:"/docs/design/",title:"Design",description:"The Doks Blog.",content:""}).add({id:13,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}).add({id:14,href:"/docs/guide/",title:"Guide",description:"Guide Tableau.",content:""}).add({id:15,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}).add({id:16,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()